import sqlglot

sql_text = """
/*---------------------------------------------------------------------------
Command to run model:
--dbt run --select ETL_MART_SALES_FUNNEL_FACT_MODELN
--dbt run --full-refresh --select ETL_MART_SALES_FUNNEL_FACT_MODELN
--dbt run --select ETL_MART_SALES_FUNNEL_FACT_MODELN --vars 'is_backfill: True'

Version     Date            Author               Description
-------     --------        -----------          ----------------------------------
1.0         09/14/2022      Vinayaka             Initial Version
2.0         09/30/2022      Sruthi Kasbe         Added new columns as part of Phase-2
3.0         11/14/2022      Vinay Subramanian    Renamed columns 
4.0         12/06/2022      Vinay Subramanian    Added 18 columns for Created, DIN and  DWIN
5.0         02/08/2023      Vinay Subramanian    Made DESIGN_REG table as part of Incremental logic and added logical delete flag
---------------------------------------------------------------------------*/


-- Step 1 Batch process info

WITH 
DESIGN_REG_INCR AS (
SELECT 
    OID
FROM EDLPRD.STG_MODELN_PRICING_OWNER.DESIGN_REG
WHERE 
   
       BIW_UPD_DTTM >= '1900-01-01 00:00:00'
		AND BIW_UPD_DTTM < '2023-09-08 10:10:30.652000'
     
QUALIFY(ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC) =1) 
),

DESIGN_PART_MAPPING  AS (
SELECT
    OID,
    COMPETITOR_OID,
    DESIGN_REG_OID,
    DESIGN_CONFIDENCE_OID,
    PART_OID,
    ASP,
    QTY_PER_SYS,
    STATUS,
    WIN_DATE,
    CUSTOM_FIELD3,
    CUSTOM_FIELD4,
    CUSTOM_FIELD16,
    CUSTOM_FIELD21,
    CUSTOM_FIELD22,
    CUSTOM_FIELD39,
    CUSTOM_FIELD41,
    CUSTOM_FIELD46,
    CUSTOM_FIELD51,
    CUSTOM_FIELD55,
    CUSTOM_FIELD56,
    CUSTOM_FIELD57,
    CUSTOM_FIELD58,
    CUSTOM_FIELD59,
    CUSTOM_FIELD61,
    CUSTOM_FIELD62,
    CUSTOM_FIELD65,
    CUSTOM_FIELD66,
    CUSTOM_FIELD70,
    CUSTOM_FIELD71,
    CUSTOM_FIELD72,
    CUSTOM_FIELD73,
    CUSTOM_FIELD74,
    CUSTOM_FIELD75,
    CUSTOM_FIELD76,
    CUSTOM_FIELD77,
    CUSTOM_FIELD78,
    CUSTOM_FIELD79,
    CUSTOM_FIELD80,
    CUSTOM_FIELD81,
    CUSTOM_FIELD82,
    CUSTOM_FIELD83,
    CUSTOM_FIELD84,
    CUSTOM_FIELD85,
    CUSTOM_FIELD86,
    CUSTOM_FIELD88,
    CUSTOM_FIELD90,
    CUSTOM_FIELD94,
    CUSTOM_FIELD98,
    CUSTOM_FIELD99,
    CUSTOM_FIELD103,
    CUSTOM_FIELD104,
    CUSTOM_FIELD109,
    CUSTOM_FIELD110,
    CUSTOM_FIELD115,
    CUSTOM_FIELD116,
    CUSTOM_FIELD118,
    CUSTOM_FIELD119,
    CUSTOM_FIELD120,
    CUSTOM_FIELD121,
    CUSTOM_FIELD124,
    CUSTOM_FIELD132,
    CUSTOM_FIELD133,
    CUSTOM_FIELD137,
    CUSTOM_FIELD142,
    CUSTOM_FIELD143,
    CUSTOM_FIELD144,
    CUSTOM_FIELD145,
    CUSTOM_FIELD147,
    CUSTOM_FIELD150,
    CUSTOM_FIELD151,
    CUSTOM_FIELD164,
    CUSTOM_FIELD166,
    CUSTOM_FIELD172,
    CUSTOM_FIELD173,
    CUSTOM_FIELD174,
    CUSTOM_FIELD175,
    CUSTOM_FIELD176,
    CUSTOM_FIELD179,
    CUSTOM_FIELD180,
    CUSTOM_FIELD181,
    CUSTOM_FIELD183,
    CUSTOM_FIELD192,
    CUSTOM_FIELD195,
    CUSTOM_FIELD191,
    CUSTOM_FIELD196,
    IS_ACTIVE,
    MODIFIED_BY,
    MODIFIED_DATE,
    CREATED_BY,
    CREATED_DATE
FROM EDLPRD.STG_MODELN_PRICING_OWNER.DESIGN_PART_MAPPING
WHERE DESIGN_REG_OID in (SELECT OID FROM DESIGN_REG_INCR)
OR  
   
       BIW_UPD_DTTM >= '1900-01-01 00:00:00'
		AND BIW_UPD_DTTM < '2023-09-08 10:10:30.652000'
     
QUALIFY(ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC) =1) 
),

DESIGN_REG  AS (
SELECT 
    OID,
    PRO_USER_OID,
    ASSEMBLY_OID,
    ACTION_PRO_USER_OID,
    CURRENCY_INFO_OID,
    DISTI_BRANCH_ORG_OID,
    DISTRIBUTOR_OID,
    END_CUSTOMER_OID,
    FUNCTION_OID,  
    PROGRAM_OID,  
    REG_NUM,
    OPPORTUNITY_NUM,
    PRODUCTION_DATE ,
    ACTION_DATE,
    COMMENT_LINE,
    CUSTOM_FIELD16,
    CUSTOM_FIELD24 ,
    CUSTOM_FIELD25,
    CUSTOM_FIELD26 ,
    CUSTOM_FIELD27 ,
    CUSTOM_FIELD57,
    CUSTOM_FIELD60 ,
    CUSTOM_FIELD71,
    CUSTOM_FIELD73,
    CUSTOM_FIELD81,
    CUSTOM_FIELD110,
    CUSTOM_FIELD117,
    CUSTOM_FIELD118 ,
    CUSTOM_FIELD123,
    CUSTOM_FIELD128,
    CUSTOM_FIELD129,
    CUSTOM_FIELD134,
    CUSTOM_FIELD144,
    CAST(CUSTOM_FIELD145 AS NUMBER(18,4) ) AS  CUSTOM_FIELD145,
    CUSTOM_FIELD151,
    EXCHANGE_RATE,
    TRUNCATE(EXCHANGE_RATE ,6) EXCHANGE_RATE_CREATED_DIN_DWIN,
    IS_OPPORTUNITY,
    JOINT_VISIT_DATE,
    MODIFIED_DATE,
    OPP_STATUS,
    PROJECT_STATUS,
    PROJECT_UNITS,
    PROTOTYPE_DATE,
    SALES_CHANNEL,
    TRANSFER_STATUS
FROM EDLPRD.STG_MODELN_PRICING_OWNER.DESIGN_REG
QUALIFY(ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC) =1) 
),
---------------------------- MODELN CUSTOMER & CORP ----------------
MODELN_CUSTOMER  AS
(
    SELECT
        OID  AS CRM_CUSTOMER_OID,
        ACCOUNT_NUM  AS CUSTOMER_CODE,
        UPPER(COALESCE(LEGAL_NAME,DISPLAY_NAME))  AS CUSTOMER_NAME,
        CUSTOM_FIELD36  AS BUSINESS_CLASS_CODE,
        CUSTOM_FIELD3  AS END_CORPORATION_CODE,
        PARENT_CUSTOMER_OID 
    FROM 
    EDLPRD.STG_MODELN_PRICING_OWNER.CUSTOMER
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUM ORDER BY MODIFIED_DATE DESC, OID DESC)=1) 
    -- WE ARE ASSUMING ALL TRANSACTIONS WILL HAPPEN WITH ACTIVE CUSTOMERS JOIN WILL ELIMINATE THE INACTIVE RECORDS.
),

MODELN_CUST_CORP  AS 
(
    SELECT 
        CUST.CRM_CUSTOMER_OID,
        CUST.CUSTOMER_CODE,
        CUST.BUSINESS_CLASS_CODE,
        CUST.END_CORPORATION_CODE,
        CORP.CUSTOMER_CODE  AS CORPORATION_CODE,
        CORP.CUSTOMER_NAME  AS CORPORATION_NAME
    FROM  MODELN_CUSTOMER  AS CUST
    LEFT JOIN MODELN_CUSTOMER  AS CORP 
    ON CUST.PARENT_CUSTOMER_OID = CORP.CRM_CUSTOMER_OID
),

MODELN_CORP  AS 
(
    SELECT 
        CUSTOMER_CODE  AS CORPORATION_CODE,
        CUSTOMER_NAME  AS CORPORATION_NAME
    FROM MODELN_CUSTOMER
    WHERE LENGTH(CUSTOMER_CODE)=4
    QUALIFY(ROW_NUMBER() OVER (PARTITION BY CORPORATION_NAME ORDER BY CORPORATION_CODE DESC) =1) 
),

MODELN_PART AS 
(
    SELECT
        MPN,
        MULT,
        OID,
        CREATED_DATE
    FROM EDLPRD.STG_MODELN_PRICING_OWNER.PART
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY MPN ORDER BY BIW_UPD_DTTM DESC)=1) 
),


DESIGN_REG_HISTORY AS (
    SELECT  
        DRH.DESIGN_REG_OID, 
        CAST(MAX(DRH.CREATED_DATE) AS DATE) AS CREATED_DATE
    FROM
    EDLPRD.STG_MODELN_PRICING_OWNER.DESIGN_REG_HISTORY AS DRH
    WHERE (DRH.TEXT = 'Is Validated changed from "Unchecked" to "Checked"' OR DRH.TEXT = 'Opp Status changed from Requested to Accepted')
    GROUP BY DRH.DESIGN_REG_OID
),
----------------- DISTRIBUTOR -------------------------------
DISTRIBUTOR AS(
   SELECT 
        OID,
        DISTI_CORPORATE_ID_OID,
        NAME
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.DISTRIBUTOR
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

DISTI_CORPORATE_ID AS(
   SELECT 
        OID,
        CODE
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.DISTI_CORPORATE_ID
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

CURRENCY_INFO AS 
(
    SELECT
        OID,
        CODE
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.CURRENCY_INFO
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

PROGRAM AS 
(
    SELECT
        OID,
        NAME
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.PROGRAM
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

ASSEMBLY AS 
(
    SELECT
        OID,
        NAME
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.ASSEMBLY
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

FUNCTION AS 
(
    SELECT
        OID,
        NAME
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.FUNCTION
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

ORG AS 
(
    SELECT
        OID,
        NAME
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.ORG
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

COMPETITOR AS 
(
    SELECT
        OID,
        NAME
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.COMPETITOR
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),

DESIGN_CONFIDENCE AS 
(
    SELECT
        OID,
        CONFIDENCE
    FROM
   EDLPRD.STG_MODELN_PRICING_OWNER.DESIGN_CONFIDENCE
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
),
------------------------------------USER NAME --------------------------
PRO_USER AS(
    SELECT 
        OID,
        USERID,
        USER_TYPE,
        FIRST_NAME,
        LAST_NAME,
        FIRST_NAME || ' ' || LAST_NAME AS FULL_NAME
    FROM 
   EDLPRD.STG_MODELN_PRICING_ADMIN.PRO_USER
   QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
   -- WE ARE ASSUMING ALL TRANSACTIONS WILL HAPPEN WITH ACTIVE CUSTOMERS AND JOIN WILL ELIMINATE THE INACTIVE RECORDS.
),
DESIGN_REG_USER AS
(
    SELECT
        DESIGN_REG_OID
        ,MAX(CASE WHEN CLASSIFICATION = 'ON Sales/Rep'  THEN PRO_USER_OID END) AS SALES_REP_OID
        ,MAX(CASE WHEN CLASSIFICATION = 'Direct Sales Support' THEN PRO_USER_OID END) AS DIRECT_SALES_SUPPORT_OID
        ,MAX(CASE WHEN CLASSIFICATION = 'Sales' THEN PRO_USER_OID END) AS SALES_OID
        ,MAX(CASE WHEN CLASSIFICATION = 'ON DSM' THEN PRO_USER_OID END) AS DSM_OID
        ,MAX(CASE WHEN CLASSIFICATION = 'Sales Mgnt' THEN PRO_USER_OID END) AS SALES_MGNT_OID
        ,MAX(CASE WHEN CLASSIFICATION = 'FAE' THEN PRO_USER_OID END) AS FAE_OID
        ,MAX(CASE WHEN CLASSIFICATION  LIKE 'Product Marketer%' THEN PRO_USER_OID END) AS PRODUCT_MARKETER_OID
        ,MAX(CASE WHEN CLASSIFICATION  ='Engineering' THEN PRO_USER_OID END) AS ENGINEER_OID
        ,MAX(CASE WHEN CLASSIFICATION  ='Disti FAE' THEN PRO_USER_OID END) AS DISTI_FAE_OID
        ,MAX(CASE WHEN CLASSIFICATION  ='Disti Sales Corporate' THEN PRO_USER_OID END) AS DISTI_SALES_CORP_OID
        ,MAX(CASE WHEN CLASSIFICATION  ='Disti Sales Branch' THEN PRO_USER_OID END) AS DISTI_SALES_BRANCH_OID
    FROM 
    (SELECT * FROM 
    EDLPRD.STG_MODELN_PRICING_OWNER.DESIGN_REG_USER_MAPPING
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY DESIGN_REG_OID,PRO_USER_OID ORDER BY BIW_UPD_DTTM DESC, PRO_USER_OID DESC)=1)
    )
    GROUP BY 1
    
),
DESIGN_REG_FSE_USER AS
(
    SELECT 
    DESIGN_REG_OID, 
    COALESCE(SALES_REP.OID,DIR_SALES.OID,USER_SALES.OID, DSM.OID,SALES_MGNT.OID) FSE_OID
    FROM DESIGN_REG_USER REG_USER
    LEFT JOIN  PRO_USER SALES_REP
        ON SALES_REP.OID= REG_USER.SALES_REP_OID
        AND SALES_REP.USER_TYPE IN ('Manufacturer', 'Rep')
    LEFT JOIN  PRO_USER DIR_SALES
        ON DIR_SALES.OID= REG_USER.DIRECT_SALES_SUPPORT_OID
        AND DIR_SALES.USER_TYPE IN ('Manufacturer', 'Rep')
    LEFT JOIN  PRO_USER USER_SALES
        ON USER_SALES.OID=REG_USER.SALES_OID
        AND USER_SALES.USER_TYPE IN ('Manufacturer', 'Rep')
    LEFT JOIN  PRO_USER DSM
        ON DSM.OID=REG_USER.DSM_OID
        AND DSM.USER_TYPE IN ('Manufacturer', 'Rep')
    LEFT JOIN  PRO_USER SALES_MGNT
        ON SALES_MGNT.OID=REG_USER.SALES_MGNT_OID
        AND SALES_MGNT.USER_TYPE IN ('Manufacturer', 'Rep')
),
DESIGN_REG_DIST_FSE_USER AS
(
    SELECT 
    DESIGN_REG_OID, 
    COALESCE(SALES.OID,SALES_CORP.OID ,SALES_BRANCH.OID ) DIST_FSE_OID
    FROM DESIGN_REG_USER REG_USER
    LEFT JOIN  PRO_USER SALES
        ON SALES.OID= REG_USER.SALES_OID
        AND SALES.USER_TYPE = 'Distributor'
    LEFT JOIN  PRO_USER SALES_CORP
        ON SALES_CORP.OID= REG_USER.DISTI_SALES_CORP_OID
        AND SALES_CORP.USER_TYPE = 'Distributor'
    LEFT JOIN  PRO_USER SALES_BRANCH
        ON SALES_BRANCH.OID=REG_USER.DISTI_SALES_BRANCH_OID
        AND SALES_BRANCH.USER_TYPE = 'Distributor'
),
DESIGN_REG_DIST_FAE_USER AS 
(
    SELECT 
    DESIGN_REG_OID, 
    COALESCE(DISTI_FAE.OID,ENGINEER.OID  ) DIST_FAE_OID
    FROM DESIGN_REG_USER REG_USER
    LEFT JOIN  PRO_USER DISTI_FAE
        ON DISTI_FAE.OID= REG_USER.DISTI_FAE_OID
        AND DISTI_FAE.USER_TYPE = 'Distributor'
    LEFT JOIN  PRO_USER ENGINEER
        ON ENGINEER.OID= REG_USER.ENGINEER_OID
        AND ENGINEER.USER_TYPE = 'Distributor'
),
-- ALL OTHER CAN BE DIRECT FROM DESIGN_REG_USER

SOCKET_STATUS AS
( 
    SELECT 
        ROW_ID,
        SOCKET_STATUS,
        DESIGN_PART_MAPPING_OID,
        EFFECTIVE_FROM_DT,
        EFFECTIVE_TO_DT
    FROM EDLPRD.STG_MODELN_PRICING_ADMIN.SOCKET_STATUS_CHANGE_HIST
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ROW_ID ORDER BY BIW_UPD_DTTM DESC)=1)
),

ONSALES_DESIGN_IN AS
(
    SELECT 
        DESIGN_PART_MAPPING_AK,
        'Design IN' AS SOCKET_STATUS,
        DESIGNIN_DATE
    FROM EDLPRD.STG_SDM_FROZEN.ONSALES_DESIGNIN_DATE_HISTORICAL
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY DESIGN_PART_MAPPING_AK ORDER BY BIW_UPD_DTTM DESC)=1)
),

DESIGNIN_DATE AS 
( 
    SELECT 
        S.DESIGN_PART_MAPPING_OID,
        S.SOCKET_STATUS,
        MAX(S.EFFECTIVE_FROM_DT) AS DESIGNIN_DATE
    FROM
    SOCKET_STATUS S
    WHERE SOCKET_STATUS = 'Design IN'
    AND S.DESIGN_PART_MAPPING_OID NOT IN (SELECT DESIGN_PART_MAPPING_AK FROM ONSALES_DESIGN_IN)
    GROUP BY 
    DESIGN_PART_MAPPING_OID,
    SOCKET_STATUS
    UNION ALL
    SELECT 
        O.DESIGN_PART_MAPPING_AK,
        O.SOCKET_STATUS,
        O.DESIGNIN_DATE
    FROM ONSALES_DESIGN_IN O
),

-------------------------------- PRODUCT REFERENCE  -------------------------------------
MPN_IPN_XREF AS
(
	SELECT 
		MPN,
        IPN,
        CUST5_CODE,
        END_CORP_CODE,
        CORP_NAME,
        START_DATE,
        END_DATE,
		CURRENT_DEFAULT_IPN,
        BIW_UPD_DTTM
	    FROM 
        (SELECT 		
            MPN,
            IPN,
            CUST5_CODE,
            END_CORP_CODE,
            CORP_NAME,
            START_DATE,
            END_DATE,
            CURRENT_DEFAULT_IPN,
            BIW_UPD_DTTM
        FROM EDLPRD.STG_PCN_PUBLIC.TRANSPARENT_FLOW_XREF
        QUALIFY( ROW_NUMBER() OVER (PARTITION BY ID ORDER BY BIW_UPD_DTTM DESC)=1)
        ) ACTIVE_REC
	QUALIFY( ROW_NUMBER() OVER (PARTITION BY MPN,CUST5_CODE,END_CORP_CODE,CORP_NAME,START_DATE ORDER BY BIW_UPD_DTTM DESC)=1)
),

--------------------------------LOGIC for Created, DIN and  DWIN--------------------------------
DESIGN_TYPE_OPPORTUNITY AS (
SELECT   
    DPM.OID,
    DR.CUSTOM_FIELD134  AS DESIGN_TYPE,
    DPM.CREATED_DATE  AS CREATED_DATE,
    DR.PROJECT_UNITS  AS ESTIMATED_ANNUAL_BOARDS_OPP,
    DPM.QTY_PER_SYS  AS QUANTITY_PER_SYSTEM_OPP,
    TRUNCATE(DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1) ,6)  AS TARGET_PRICE_USD_OPP,
    CAST(((DR.PROJECT_UNITS * DPM.QTY_PER_SYS * (TRUNCATE((DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1)), 6))) 
        * (CAST( REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)) AS NUMBER(38,2)) AS DESIGN_REVENUE_SHARE_OPP,
    (CAST(REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)  AS ONSHARE_OPP,
    DR.CUSTOM_FIELD145  AS PROJECT_VALUE_OVER_LIFETIME_OPP,
    EXCHANGE_RATE_CREATED_DIN_DWIN  AS EXCHANGE_RATE_OPP
FROM DESIGN_PART_MAPPING DPM  
JOIN DESIGN_REG DR
ON DPM.DESIGN_REG_OID = DR.OID 
WHERE DR.CUSTOM_FIELD134='Opportunity' 
AND TO_DATE(DPM.CREATED_DATE) >= CURRENT_DATE() - 1
),

DESIGN_TYPE_REGISTRATION AS (
  SELECT   
    DPM.OID,   
    DR.CUSTOM_FIELD134 AS DESIGN_TYPE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD137 ,'YYYYMMDD HH24MISS') AS REGISTRATION_ITEM_REVIEW_DATE,
    DPM.CUSTOM_FIELD116 AS REGISTRATION_ITEM_STATUS,
    DR.PROJECT_UNITS  AS ESTIMATED_ANNUAL_BOARDS_REG,
    DPM.QTY_PER_SYS  AS QUANTITY_PER_SYSTEM_REG,
    TRUNCATE(DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1) ,6)  AS TARGET_PRICE_USD_REG,
    CAST(((DR.PROJECT_UNITS * DPM.QTY_PER_SYS * (TRUNCATE((DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1)), 6))) 
        * (CAST( REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)) AS NUMBER(38,2)) AS DESIGN_REVENUE_SHARE_REG,
    (CAST(REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)  AS ONSHARE_REG,
    DR.CUSTOM_FIELD145 AS PROJECT_VALUE_OVER_LIFETIME_REG,
    EXCHANGE_RATE_CREATED_DIN_DWIN  AS EXCHANGE_RATE_REG
  FROM DESIGN_PART_MAPPING DPM  
  JOIN DESIGN_REG DR
  ON DPM.DESIGN_REG_OID = DR.OID  
  WHERE DR.CUSTOM_FIELD134='Registration'
  AND DPM.CUSTOM_FIELD116 IN ('Approved','Expired') 
  AND TRY_TO_DATE(DPM.CUSTOM_FIELD137 ,'YYYYMMDD HH24MISS') >= CURRENT_DATE() - 1
),

FINAL_SQL AS (
SELECT 
    MD5(OBJECT_CONSTRUCT ('COL1',DPM.OID::STRING
                        , 'COL2',CURRENT_DATE::STRING
                        , 'COL3','MODELN'::STRING
                        )::STRING) AS FUNNEL_KEY, -- SINCE WE DON'T HAVE PROPER NK, WE ARE GOING WITH OID
    REPLACE(SUBSTRING(CURRENT_DATE,1,10),'-') :: NUMBER AS SNAPSHOT_DATE_KEY,
    MD5(COALESCE(DIRECT_CUST.CUSTOMER_CODE,'-1')) AS DIRECT_CUSTOMER_KEY, 
    MD5(COALESCE(DIRECT_CUST.CUSTOMER_CODE,'-1')) AS INDIRECT_CUSTOMER_KEY,
    MD5(COALESCE(DIRECT_CUST.CUSTOMER_CODE,'-1')) AS END_CUSTOMER_KEY,
    MD5(COALESCE(DIRECT_CUST.CORPORATION_CODE,'-1')) AS DIRECT_CORPORATION_KEY,
    MD5(COALESCE(DIRECT_CUST.CORPORATION_CODE,'-1')) AS INDIRECT_CORPORATION_KEY,
    MD5(COALESCE(END_CORP.CORPORATION_CODE,
             CASE WHEN  RIGHT(DR.CUSTOM_FIELD81,5)='SPPP)' THEN 'SPPP' -- WE SHOULD MODELN TEAM TO FIX IT
             ELSE DIRECT_CUST.CORPORATION_CODE
             END)) AS END_CORPORATION_KEY, 

    MD5(COALESCE(PART.MPN,'-1')) AS MARKET_PRODUCT_NUMBER_KEY, 
    MD5(COALESCE(IPN_REF_DIR_CUST.IPN,IPN_REF_END_CORP.IPN, IPN_REF_DIR_MPN.IPN,PART.MPN,'-1')) AS INTERNAL_PART_NUMBER_KEY,
    REPLACE(SUBSTRING(DR.PRODUCTION_DATE,1,10),'-')::NUMBER AS PRODUCTION_DATE_KEY,
    CAST(DR.OID AS VARCHAR) AS DESIGN_REGISTRATION_KEY, 
    CAST(DPM.OID AS VARCHAR) AS DESIGN_PART_MAPPING_KEY,    
    SUBSTRING(DPM.CUSTOM_FIELD72,1,8)::NUMBER  AS DECISION_DAY_KEY,
    REPLACE(SUBSTRING(DSGN_DATE.DESIGNIN_DATE,1,10),'-')::NUMBER  AS DESIGN_IN_DAY_KEY,
    REPLACE(SUBSTRING(DR.ACTION_DATE,1,10),'-')::NUMBER  AS ACTION_DAY_KEY,

    -------------------CODE ----------------------
    DIRECT_CUST.CUSTOMER_CODE  AS DIRECT_CUSTOMER_CODE,
    DIRECT_CUST.CUSTOMER_CODE  AS INDIRECT_CUSTOMER_CODE,
    DIRECT_CUST.CUSTOMER_CODE  AS END_CUSTOMER_CODE,
    DIRECT_CUST.CORPORATION_CODE  AS DIRECT_CORPORATION_CODE,
    DIRECT_CUST.CORPORATION_CODE  AS INDIRECT_CORPORATION_CODE,
    COALESCE(END_CORP.CORPORATION_CODE,
             CASE WHEN  RIGHT(DR.CUSTOM_FIELD81,5)='SPPP)' THEN 'SPPP' -- WE SHOULD MODELN TEAM TO FIX IT
             ELSE DIRECT_CUST.CORPORATION_CODE
             END)  AS END_CORPORATION_CODE,
    PART.MPN  AS MARKET_PRODUCT_NUMBER,
	COALESCE(IPN_REF_DIR_CUST.IPN,IPN_REF_END_CORP.IPN, IPN_REF_DIR_MPN.IPN,PART.MPN) AS INTERNAL_PART_NUMBER, 
    PRODUCTION_DATE AS TRANSACTION_DATE,
    TO_DATE(SUBSTRING(DPM.CUSTOM_FIELD72,1,8),'YYYYMMDD' )  AS DECISION_DATE,
    DR.ACTION_DATE,
    DSGN_DATE.DESIGNIN_DATE::DATE AS DESIGN_IN_DATE,
    -----------------OTHER METRIC/ATTRIBUTES----------------
    DPM.QTY_PER_SYS  AS QUANTITY_PER_SYSTEM,
    TRUNCATE(DR.EXCHANGE_RATE ,6)  AS EXCHANGE_RATE,

    TRUNCATE(DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1) ,6)  AS TARGET_PRICE_USD,
    (DPM.CUSTOM_FIELD62 / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1) )::DECIMAL(18,0) AS NRE_USD,
    
    CAST((DR.PROJECT_UNITS * DPM.QTY_PER_SYS * TRUNCATE((DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1)), 6)) AS NUMBER(38,2)) AS DESIGN_REVENUE,
    CAST(((DR.PROJECT_UNITS * DPM.QTY_PER_SYS * (TRUNCATE((DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1)), 6))) * (CAST( REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100))
     AS NUMBER(38,2)) AS DESIGN_REVENUE_SHARE,
    
    NVL(DC.CONFIDENCE,1)  AS CONFIDENCE,

    (CAST(REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)  AS ONSHARE,
    CAST(DPM.CUSTOM_FIELD77 AS NUMBER(36,2))  AS COMMISSIONABLE_NRE_USD,
    CAST(DPM.CUSTOM_FIELD78 AS NUMBER(36,2))  AS COMMISSIONABLE_THREE_YEAR_REVENUE_USD,
    CAST((((NVL(CAST(DR.CUSTOM_FIELD24 AS NUMBER(38)), 0) 
                  + NVL(CAST(DR.CUSTOM_FIELD25 AS NUMBER(38)), 0) 
                  + NVL(CAST(DR.CUSTOM_FIELD26 AS NUMBER(38)), 0)) 
          * DPM.QTY_PER_SYS * (TRUNCATE((DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1)), 6)))
          * (CAST( REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)) AS NUMBER(38))  AS THREE_YEAR_REVENUE,
    CAST((((NVL(CAST(DR.CUSTOM_FIELD24 AS NUMBER(38)), 0) 
                  + NVL(CAST(DR.CUSTOM_FIELD25 AS NUMBER(38)), 0) 
                  + NVL(CAST(DR.CUSTOM_FIELD26 AS NUMBER(38)), 0) 
                  + NVL(CAST(DR.CUSTOM_FIELD27 AS NUMBER(38)), 0)) 
          * DPM.QTY_PER_SYS * (TRUNCATE((DPM.ASP::DECIMAL(38,18) / NVL(DR.EXCHANGE_RATE::DECIMAL(38,15), 1)), 6))) 
          * (CAST(REPLACE(NVL(DPM.CUSTOM_FIELD3, 100), '%', '') AS NUMBER(36,2)) / 100)) AS NUMBER(38))  AS LIFETIME_REVENUE,

    ROUND(CAST(REPLACE(NVL(DPM.CUSTOM_FIELD75, 100), '%', '') AS DECIMAL(36,2))/100,0) AS NEW_BUSINESS_COMMIT_PCT,
    DPM.CUSTOM_FIELD79  AS COST_TO_DEV_USD,
    CAST(DPM.CUSTOM_FIELD86 AS NUMBER(38,0))  AS ITEM_NUMBER,
    CAST(DPM.CUSTOM_FIELD195 AS NUMBER(36,4))  AS OPERATIONAL_ASP,
    CAST(DPM.CUSTOM_FIELD21 AS NUMBER(36,4) )  AS REF_PRICE,
    CAST(DPM.CUSTOM_FIELD191 AS VARCHAR(250))  AS SIP_MULTIPLIER,
   
    CAST(DPM.CUSTOM_FIELD172 AS NUMBER(36,5))  AS REGISTRATION_COST_ESTIMATE,
    CAST(DPM.CUSTOM_FIELD173 AS NUMBER(36,4))  AS BU_PRICE,
   
    CI.CODE  AS TRANSACTION_CURRENCY_ISO_CODE,
    DR.CUSTOM_FIELD145 AS PROJECT_VALUE_OVER_LIFETIME,
    CAST(DPM.CUSTOM_FIELD174 AS NUMBER(36,5))  AS ONMARGIN_PERCENT_CUSTOMER_PRICE_REGULAR_PRICE,

    -------------------DATE ATTRIBUTES---------------------------------
    DPM.CREATED_DATE  AS CREATED_DATE,
    DPM.MODIFIED_DATE  AS MODIFIED_DATE,
    CAST(DR.PROTOTYPE_DATE AS DATE)  AS PROTOTYPE_DATE,
    CAST(DPM.WIN_DATE AS DATE)  AS SOCKET_STATUS_CHANGE_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD133 ,'YYYYMMDD HH24MISS') AS REGISTRATION_ITEM_REQUEST_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD137 ,'YYYYMMDD HH24MISS') AS REGISTRATION_ITEM_REVIEW_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD118 ,'YYYYMMDD HH24MISS') AS REGISTRATION_ITEM_EXPIRE,
    DRHVALDATE.CREATED_DATE  AS VALIDATED_DATE,
    TO_DATE(LEFT(DPM.CUSTOM_FIELD76, 8),'YYYYMMDD')  AS COMMISSION_WIN_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD75 ,'YYYYMMDD HH24MISS') AS BLUESHEET_FIRST_ADD_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD76 ,'YYYYMMDD HH24MISS') AS BLUESHEET_UPDATED_DATE,
    TO_DATE(LEFT(DPM.CUSTOM_FIELD66,8),'YYYYMMDD')  AS SAMPLES_REQUIRED_DATE,
    CAST(LEFT(DPM.CUSTOM_FIELD84, 10) AS DATE)  AS SEGMENT_MUSTWIN_SET_DATE,
    CAST(LEFT(DPM.CUSTOM_FIELD82, 10) AS DATE)  AS EXEC_MUSTWIN_SET_DATE,
    CAST(LEFT(DPM.CUSTOM_FIELD83, 10) AS DATE)  AS VP_MUSTWIN_SET_DATE,

	COALESCE(CAST(DPM.WIN_DATE AS DATE), CAST(SOCKET.EFFECTIVE_FROM_DT AS DATE)) AS CLAIM_WIN_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD99 ,'YYYYMMDD HH24MISS') AS NEXT_MILESTONE_DATE,
    CAST(DR.JOINT_VISIT_DATE AS DATE) AS OPPORTUNITY_DECISION_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD109 ,'YYYYMMDD HH24MISS') AS BU_START_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD110 ,'YYYYMMDD HH24MISS') AS BU_END_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD137 ,'YYYYMMDD HH24MISS') AS ORIGINAL_APPROVAL_DATE,
    TRY_TO_TIMESTAMP(DPM.CUSTOM_FIELD147 ,'YYYYMMDD HH24MISS') AS ORIGINAL_DISPOSITION_DATE,
    DR.MODIFIED_DATE  AS PROJECT_MODIFIED_DATE,
    CAST(DPM.CUSTOM_FIELD65 AS DATE)  AS BU_DESIGN_IN_REQUEST_DATE,

    ------------------FLAGS -------------------------------------------
    COALESCE(TO_BOOLEAN(DPM.IS_ACTIVE),'FALSE')::BOOLEAN AS IS_PART_ACTIVE,
    COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD132),'FALSE')::BOOLEAN AS IS_PRIMARY_OPN,
    COALESCE(TO_BOOLEAN(DR.IS_OPPORTUNITY),'FALSE')::BOOLEAN  AS IS_OPPORTUNITY,
    COALESCE(TO_BOOLEAN(DR.CUSTOM_FIELD16),'FALSE')::BOOLEAN AS IS_REFERENCE_DESIGN,
    COALESCE(TO_BOOLEAN(DR.CUSTOM_FIELD129),'FALSE')::BOOLEAN AS IS_MUSTWIN,
    COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD70),'FALSE')::BOOLEAN  AS IS_SEGMENT_MUSTWIN,
    COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD73),'FALSE')::BOOLEAN  AS IS_EXECMUSTWIN,
    COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD74),'FALSE')::BOOLEAN  AS IS_VPNMUSTWIN,
    COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD88),'FALSE')::BOOLEAN  AS IS_DSM_REVIEW,
    COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD98),'FALSE')::BOOLEAN  AS IS_BOM_EXPANSION,
    -- COALESCE(TO_BOOLEAN(DPM.CUSTOM_FIELD150),'FALSE')::BOOLEAN AS IS_SUNSET,
    (CASE WHEN DPM.CUSTOM_FIELD98='true' THEN 'TRUE'
                ELSE 'FALSE'
                END) :: BOOLEAN AS IS_SUNSET, 
    COALESCE(TO_BOOLEAN(NULLIF(DPM.CUSTOM_FIELD145 ,'N/A')),'FALSE')::BOOLEAN AS IS_NPI,
    ----------------------- SOURCE AUDIT --------------------------------
    DPM.CREATED_BY  AS CREATED_BY,
    DPM.MODIFIED_BY  AS MODIFIED_BY,

    -------------------------OPPORTUNITY---------------------------------
    DR.OPPORTUNITY_NUM  AS OPPORTUNITY_NUMBER,
    DR.OPP_STATUS  AS OPPORTUNITY_LIFECYCLE_STATUS,
    DR.CUSTOM_FIELD134  AS DESIGN_TYPE,
    CASE 
        WHEN DR.DISTRIBUTOR_OID = 0 
        THEN    CASE 
                WHEN DR.SALES_CHANNEL  = 1 
                    THEN 'Distributor'
                ELSE 'Direct'
                END
        ELSE 'Distributor'
    END  AS CHANNEL_TYPE,
    CASE DR.DISTRIBUTOR_OID
          WHEN 0 THEN CASE DR.SALES_CHANNEL
                  WHEN 1 THEN 'Distributor TBD'
                  ELSE 'Direct'
          END
          ELSE D.NAME                                                    
    END  AS CHANNEL,
	FSE_USER.FULL_NAME  AS FSE, 
	FAE_USER.FULL_NAME AS FAE,
	CASE
          WHEN DPM.CUSTOM_FIELD120 IS NULL
		  THEN BU_USER.FULL_NAME
          ELSE DPM.CUSTOM_FIELD120
	END AS PRODUCT_MARKETER,
    NULLIF(DR.CUSTOM_FIELD57,'None') AS SEC_INVOLVEMENT,
    CASE DR.PROJECT_STATUS
          WHEN 'Win' THEN 'N/A'
          ELSE NVL(DR.PROJECT_STATUS, 'N/A')
    END  AS PROGRAM_STATUS,
    CAST(PROG.NAME AS VARCHAR(250)) AS PROGRAM_NAME,
    CAST(ASM.NAME AS VARCHAR(250)) AS BOARD_NAME,
    DR.PROJECT_UNITS  AS ESTIMATED_ANNUAL_BOARDS,
    DPM.CUSTOM_FIELD61 AS PART_TYPE,
    DPM.CUSTOM_FIELD51  AS LINE_DESCRIPTION,
    DPM.CUSTOM_FIELD22  AS SALES_SOCKET_STATUS,
    DPM.STATUS  AS CORPORATION_SOCKET_STATUS,
    NVL(LEFT(F.NAME, CHARINDEX(' -', F.NAME)), 'N/A') AS SEGMENT,
    F.NAME  AS APPLICATION,
    -------------REGISTRATION ------------------
    DR.REG_NUM AS REGISTRATION_NUMBER,
    DPM.CUSTOM_FIELD85  AS ACTION_NOTES,
    CAST(LEFT(DR.COMMENT_LINE, 250) AS VARCHAR(4000)) AS OPPORTUNITY_COMMENTS,

    ---------------DISTRIBUTOR ------------------------
    DIST_CORP_NAME.CORPORATION_NAME  AS DISTRIBUTOR_NAME,
    DISTORG.NAME  AS DISTRIBUTOR_BRANCH_NAME,
    REG_REV_USER.FULL_NAME  AS REGISTRATION_ITEM_REVIEWBY,
    DPM.CUSTOM_FIELD116 AS REGISTRATION_ITEM_STATUS,
    DPM.CUSTOM_FIELD119 AS REGISTRATION_ITEM_CANCEL_REJECT_REASON,
	DFSE_USER.FULL_NAME  AS DISTRIBUTOR_FSE,
	DFAE_USER.FULL_NAME  AS DISTRIBUTOR_FAE,
    TRIM(CASE 
          WHEN DPM.CUSTOM_FIELD81 IS NULL THEN NULL
          WHEN CHARINDEX(',', DPM.CUSTOM_FIELD81) = 0 THEN NULL
          ELSE LEFT(DPM.CUSTOM_FIELD81, (CHARINDEX(',', DPM.CUSTOM_FIELD81)-1)) 
    END) AS COMMISSION_UPDATED_BY,
    DPM.CUSTOM_FIELD80 AS COMMISSION_NOTES,
    NVL(DR.CUSTOM_FIELD71, 'Not Mandated') AS BLUE_SHEET_REQUIRED,
    DR.CUSTOM_FIELD73 AS BLUE_SHEET_URL,
    CASE 
          WHEN DR.CUSTOM_FIELD118 IS NOT NULL THEN 'Formal Win'
          ELSE DPM.CUSTOM_FIELD4
    END  AS BU_STATUS,
    DPM.CUSTOM_FIELD39 AS BU_COMMENT,
    DR.CUSTOM_FIELD123 AS CROSS_SELL_TYPE,
    COMP.NAME  AS COMPETITION,
    DPM.CUSTOM_FIELD71 AS RYG_STATUS,
    DR.CUSTOM_FIELD128 AS SWAT_TEAM,
    DPM.CUSTOM_FIELD115 AS REGISTRATION_ITEM_NUMBER,
    DR.CUSTOM_FIELD117 AS DESIGN_STATUS,
    DPM.CUSTOM_FIELD90 AS BU_ACTION_NOTES,
    DPM.CUSTOM_FIELD41 AS BU_DESIGN_IN_REQUEST,
    ---------------PHASE 2 COLUMNS--------------------------
	DPM.CUSTOM_FIELD55 AS POS50K_2M_REGOWNER,
	DPM.CUSTOM_FIELD56 AS POS2MPLUS_REGOWNER,
	DPM.CUSTOM_FIELD57 AS POS50K_2M_NON_REGOWNER,
	DPM.CUSTOM_FIELD58 AS POS2MPLUS_NON_REGOWNER,
    DPM.CUSTOM_FIELD59  AS REBATE_NOTES,
    DR.CUSTOM_FIELD110 AS REFERENCE_OPPORTUNITY_NUMBER,
    COALESCE(DI_APPRV_USER.FULL_NAME, DPM.CUSTOM_FIELD94) AS DESIGN_IN_APPROVER,        
    DPM.CUSTOM_FIELD103 AS BU_MARKETER_APPROVAL,
    DPM.CUSTOM_FIELD104 AS BU_MARKETER_APPROVER_ID,
    IMP_USER.FULL_NAME  AS BU_MARKETER_APPROVER_NAME,
    CAST(DR.CUSTOM_FIELD60 AS VARCHAR(100)) AS DISTRIBUTOR_PROJECT_REF,
    CAST(DPM.CUSTOM_FIELD46 AS VARCHAR(100)) AS DISTRIBUTOR_DEVICE_REF,
    CAST(DR.CUSTOM_FIELD151 AS VARCHAR(100)) AS BLOCK_DIAGRAM_COMPLETE,
    CAST(DR.CUSTOM_FIELD144 AS VARCHAR(100)) AS OPPORTUNITY_REGISTRATION_TYPE,
    CASE
        WHEN DR.TRANSFER_STATUS IS NULL OR DR.TRANSFER_STATUS = 'N/A' THEN '-'
        WHEN DR.TRANSFER_STATUS IS NOT NULL THEN DR.TRANSFER_STATUS
    END AS TRANSFER_STATUS,
    CAST(DPM.CUSTOM_FIELD164 AS VARCHAR(2048)) AS DISTRIBUTOR_NOTES,
    CAST(DPM.CUSTOM_FIELD151 AS VARCHAR(2048)) AS SPLIT_REVIEW_STATUS,
    CAST(DPM.CUSTOM_FIELD175 AS VARCHAR(250)) AS LOW_MARGIN_EXCEPTION,
    CAST(DPM.CUSTOM_FIELD176 AS VARCHAR(250)) AS MARGIN_BUCKET,
    CAST(DPM.CUSTOM_FIELD143 AS VARCHAR(250)) AS NPI_STATUS,
    CAST(RIGHT( DPM.CUSTOM_FIELD142, LEN(DPM.CUSTOM_FIELD142)-CHARINDEX('/', DPM.CUSTOM_FIELD142)) AS VARCHAR(250)) AS NPI_NUMBER,
    CAST(RIGHT( DPM.CUSTOM_FIELD144, LEN(DPM.CUSTOM_FIELD144)-CHARINDEX('/', DPM.CUSTOM_FIELD144)) AS VARCHAR(250)) AS NPD_PROJECT_NUMBER,
    ---------------PHASE 2 COLUMNS--------------------------
	CAST(DPM.CUSTOM_FIELD166 AS VARCHAR(250)) AS OPPORTUNITY_LINE_CONTACT,
    CAST(DPM.CUSTOM_FIELD192 AS VARCHAR(250)) AS SIP_REASON,
	CAST(DPM.CUSTOM_FIELD183 AS VARCHAR(250)) AS DESIGNWIN_REQUEST_STATUS,
	CAST(DPM.CUSTOM_FIELD179 AS VARCHAR(100)) AS CATCHUP_REG,
	CAST(DPM.CUSTOM_FIELD180 AS NUMERIC(38)) AS EFFORT_TIER,
    CAST(DPM.CUSTOM_FIELD181 AS NUMERIC(38)) AS PRODUCT_TIER, 
	CAST(DPM.CUSTOM_FIELD196 AS VARCHAR(250)) AS DESIGNIN_DESIGNWIN_APPROVER,
    'MODELN' AS SOURCE_SYSTEM,
    ------------------Created_XXXX---------------------------
    COALESCE(REG.ESTIMATED_ANNUAL_BOARDS_REG,OPP.ESTIMATED_ANNUAL_BOARDS_OPP) AS CREATED_ESTIMATED_ANNUAL_BOARDS,
    COALESCE(REG.QUANTITY_PER_SYSTEM_REG,OPP.QUANTITY_PER_SYSTEM_OPP) AS CREATED_QUANTITY_PER_SYSTEM, 
    COALESCE(REG.TARGET_PRICE_USD_REG,OPP.TARGET_PRICE_USD_OPP) AS CREATED_TARGET_PRICE_USD, 
    COALESCE(REG.DESIGN_REVENUE_SHARE_REG,OPP.DESIGN_REVENUE_SHARE_OPP) AS CREATED_DESIGN_REVENUE_SHARE, 
    COALESCE(REG.ONSHARE_REG,OPP.ONSHARE_OPP) AS CREATED_ONSHARE, 
    COALESCE(REG.PROJECT_VALUE_OVER_LIFETIME_REG/REG.EXCHANGE_RATE_REG,OPP.PROJECT_VALUE_OVER_LIFETIME_OPP/OPP.EXCHANGE_RATE_OPP) AS CREATED_PROJECT_VALUE_OVER_LIFETIME,
    ------------------DIN_XXXX--------------------------- 
    CASE 
        WHEN DESIGN_IN_DATE >= CURRENT_DATE() - 1 
        THEN ESTIMATED_ANNUAL_BOARDS 
    END AS DIN_ESTIMATED_ANNUAL_BOARDS, 
    CASE 
        WHEN DESIGN_IN_DATE >= CURRENT_DATE() - 1
        THEN QUANTITY_PER_SYSTEM 
    END AS DIN_QUANTITY_PER_SYSTEM, 
    CASE 
        WHEN DESIGN_IN_DATE >= CURRENT_DATE() - 1
        THEN TARGET_PRICE_USD 
    END AS DIN_TARGET_PRICE_USD, 
    CASE 
        WHEN DESIGN_IN_DATE >= CURRENT_DATE() - 1
        THEN DESIGN_REVENUE_SHARE
    END AS DIN_DESIGN_REVENUE_SHARE,
    CASE 
        WHEN DESIGN_IN_DATE >= CURRENT_DATE() - 1
        THEN ONSHARE 
    END AS DIN_ONSHARE,
    CASE 
        WHEN DESIGN_IN_DATE >= CURRENT_DATE() - 1
        THEN PROJECT_VALUE_OVER_LIFETIME/EXCHANGE_RATE_CREATED_DIN_DWIN
    END AS DIN_PROJECT_VALUE_OVER_LIFETIME,
    ------------------DWIN_XXXX--------------------------- 
    CASE 
        WHEN CLAIM_WIN_DATE >= CURRENT_DATE() - 1  
        THEN ESTIMATED_ANNUAL_BOARDS 
    END AS DWIN_ESTIMATED_ANNUAL_BOARDS, 
    CASE 
        WHEN CLAIM_WIN_DATE >= CURRENT_DATE() - 1  
        THEN QUANTITY_PER_SYSTEM 
    END AS DWIN_QUANTITY_PER_SYSTEM, 
    CASE 
        WHEN CLAIM_WIN_DATE >= CURRENT_DATE() - 1  
        THEN TARGET_PRICE_USD 
    END AS DWIN_TARGET_PRICE_USD, 
    CASE 
        WHEN CLAIM_WIN_DATE >= CURRENT_DATE() - 1
        THEN DESIGN_REVENUE_SHARE 
    END AS DWIN_DESIGN_REVENUE_SHARE,
    CASE 
        WHEN CLAIM_WIN_DATE >= CURRENT_DATE() - 1  
        THEN ONSHARE 
    END AS DWIN_ONSHARE,
    CASE 
        WHEN CLAIM_WIN_DATE >= CURRENT_DATE() - 1  
        THEN PROJECT_VALUE_OVER_LIFETIME/EXCHANGE_RATE_CREATED_DIN_DWIN 
    END AS DWIN_PROJECT_VALUE_OVER_LIFETIME,
    '2023-09-08 10:10:30.652000'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '2023-09-08 10:10:30.652000'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    603637 AS BIW_BATCH_ID,                                                                                  
    'N'::BOOLEAN BIW_LOGICAL_DELETE_FLAG
FROM DESIGN_PART_MAPPING DPM  
JOIN DESIGN_REG DR
ON DPM.DESIGN_REG_OID = DR.OID
----------- DIRECT CUSTOMER & CORP ------------------------------
LEFT JOIN MODELN_CUST_CORP  AS DIRECT_CUST
    ON DR.END_CUSTOMER_OID = DIRECT_CUST.CRM_CUSTOMER_OID
LEFT JOIN MODELN_CORP  AS END_CORP
    ON  DR.CUSTOM_FIELD81= END_CORP.CORPORATION_NAME
---------------PART ----------------------------
LEFT JOIN MODELN_PART PART
    ON DPM.PART_OID = PART.OID
--------------USER NAME -------------------
LEFT JOIN PRO_USER ACTN_USER
    ON DR.ACTION_PRO_USER_OID = ACTN_USER.OID
-----------------------------------------------------------------
LEFT JOIN DESIGN_REG_USER DRU 
	ON DRU.DESIGN_REG_OID = DR.OID
-----------------------------------------------------------------
------------- FSE USER 
LEFT JOIN DESIGN_REG_FSE_USER DRU_FSE 
	ON DRU_FSE.DESIGN_REG_OID = DR.OID
LEFT JOIN PRO_USER FSE_USER
    ON DRU_FSE.FSE_OID = FSE_USER.OID
-----------------------------------------------------------------
-------------FAE USER
LEFT JOIN PRO_USER FAE_USER
	ON DRU.FAE_OID = FAE_USER.OID
    AND FAE_USER.USER_TYPE IN ('Manufacturer', 'Rep')
-----------------------------------------------------------------
-------------BU USER
LEFT JOIN PRO_USER BU_USER
    ON DRU.PRODUCT_MARKETER_OID = BU_USER.OID
    AND BU_USER.USER_TYPE IN ('Manufacturer', 'Rep')
-----------------------------------------------------------------
-------------DFSE_USER
LEFT JOIN DESIGN_REG_DIST_FSE_USER DIST_FSE 
	ON DIST_FSE.DESIGN_REG_OID = DR.OID
LEFT JOIN PRO_USER DFSE_USER
    ON DIST_FSE.DIST_FSE_OID = DFSE_USER.OID
-----------------------------------------------------------------
-------------DFAE_USER
LEFT JOIN DESIGN_REG_DIST_FAE_USER DIST_FAE 
	ON DIST_FAE.DESIGN_REG_OID = DR.OID
LEFT JOIN PRO_USER DFAE_USER
    ON DIST_FAE.DIST_FAE_OID = DFAE_USER.OID
-----------------------------------------------------------------

LEFT JOIN PRO_USER DI_APPRV_USER
    ON DPM.CUSTOM_FIELD94 = DI_APPRV_USER.USERID
LEFT JOIN PRO_USER IMP_USER
    ON DPM.CUSTOM_FIELD104 = IMP_USER.USERID
LEFT JOIN PRO_USER REG_REV_USER
    ON DPM.CUSTOM_FIELD124 = REG_REV_USER.USERID
LEFT JOIN DESIGN_REG_HISTORY DRHVALDATE 
    ON DRHVALDATE.DESIGN_REG_OID = DR.OID 

---------------------DISTRIBUTOR ------------------
LEFT JOIN DISTRIBUTOR D
    ON DR.DISTRIBUTOR_OID = D.OID
LEFT JOIN DISTI_CORPORATE_ID DIST_CORP
    ON D.DISTI_CORPORATE_ID_OID = DIST_CORP.OID
LEFT JOIN MODELN_CORP DIST_CORP_NAME
    ON DIST_CORP.CODE = DIST_CORP_NAME.CORPORATION_CODE

------------------ CURRENCY -------------------
LEFT JOIN CURRENCY_INFO CI
    ON DR.CURRENCY_INFO_OID = CI.OID
LEFT JOIN PROGRAM PROG
    ON DR.PROGRAM_OID = PROG.OID    
LEFT JOIN ASSEMBLY ASM
    ON DR.ASSEMBLY_OID = ASM.OID 
LEFT JOIN FUNCTION F
    ON DR.FUNCTION_OID = F.OID 
LEFT JOIN ORG DISTORG
    ON DR.DISTI_BRANCH_ORG_OID = DISTORG.OID  
LEFT JOIN COMPETITOR COMP
    ON DPM.COMPETITOR_OID = COMP.OID  
LEFT JOIN DESIGN_CONFIDENCE DC
    ON DPM.DESIGN_CONFIDENCE_OID = DC.OID 
LEFT JOIN SOCKET_STATUS SOCKET 
    ON DPM.OID = SOCKET.DESIGN_PART_MAPPING_OID
    AND SOCKET.SOCKET_STATUS = 'Design Win'
    AND SOCKET.EFFECTIVE_TO_DT IS NULL	
LEFT JOIN DESIGNIN_DATE DSGN_DATE
    ON DPM.OID = DSGN_DATE.DESIGN_PART_MAPPING_OID
	
---------- CROSS REFERENCE CHECK ON MPN AND IPN-------------------
 --- FINDING USING DIRECT CUSTOMER
LEFT JOIN MPN_IPN_XREF AS IPN_REF_DIR_CUST
    ON PART.MPN = IPN_REF_DIR_CUST.MPN
    AND  DIRECT_CUST.CUSTOMER_CODE = IPN_REF_DIR_CUST.CUST5_CODE
    AND  DPM.CREATED_DATE BETWEEN IPN_REF_DIR_CUST.START_DATE AND IPN_REF_DIR_CUST.END_DATE
    AND IPN_REF_DIR_CUST.END_CORP_CODE IS NULL
    --- FINDING USING END CORP CUSTOMER
LEFT JOIN MPN_IPN_XREF AS IPN_REF_END_CORP
    ON PART.MPN = IPN_REF_END_CORP.MPN
    AND  END_CORPORATION_CODE = IPN_REF_END_CORP.END_CORP_CODE
    AND DPM.CREATED_DATE BETWEEN IPN_REF_END_CORP.START_DATE AND IPN_REF_END_CORP.END_DATE
    AND IPN_REF_END_CORP.CUST5_CODE IS NULL
    --- FINDING USING DIRECT LOOKUP
LEFT JOIN MPN_IPN_XREF AS IPN_REF_DIR_MPN
    ON PART.MPN = IPN_REF_DIR_MPN.MPN
    AND DPM.CREATED_DATE BETWEEN IPN_REF_DIR_MPN.START_DATE AND IPN_REF_DIR_MPN.END_DATE
    AND IPN_REF_DIR_MPN.CUST5_CODE IS NULL
    AND IPN_REF_DIR_MPN.END_CORP_CODE IS NULL
    AND IPN_REF_DIR_MPN.CURRENT_DEFAULT_IPN::BOOLEAN = 'TRUE'
LEFT JOIN  DESIGN_TYPE_OPPORTUNITY OPP 
    ON DPM.OID = OPP.OID
LEFT JOIN  DESIGN_TYPE_REGISTRATION REG 
    ON DPM.OID = REG.OID
)

SELECT 
    FINAL_SQL.*,
    md5(object_construct ('col1',DIRECT_CUSTOMER_KEY::string, 'col2',INDIRECT_CUSTOMER_KEY::string,
    'col3',END_CUSTOMER_KEY::string, 'col4',DIRECT_CORPORATION_KEY::string, 'col5',INDIRECT_CORPORATION_KEY::string,
    'col6',END_CORPORATION_KEY::string, 'col7',MARKET_PRODUCT_NUMBER_KEY::string, 'col8',INTERNAL_PART_NUMBER_KEY::string,
    'col9',PRODUCTION_DATE_KEY::string, 'col10',DESIGN_REGISTRATION_KEY::string, 'col11',DESIGN_PART_MAPPING_KEY::string,
    'col12',DECISION_DAY_KEY::string, 'col13',DESIGN_IN_DAY_KEY::string, 'col14',ACTION_DAY_KEY::string,
    'col15',DIRECT_CUSTOMER_CODE::string, 'col16',INDIRECT_CUSTOMER_CODE::string, 'col17',END_CUSTOMER_CODE::string,
    'col18',DIRECT_CORPORATION_CODE::string, 'col19',INDIRECT_CORPORATION_CODE::string, 'col20',END_CORPORATION_CODE::string,
    'col21',MARKET_PRODUCT_NUMBER::string, 'col22',INTERNAL_PART_NUMBER::string, 'col23',TRANSACTION_DATE::string,
    'col24',DECISION_DATE::string, 'col25',ACTION_DATE::string, 'col26',DESIGN_IN_DATE::string, 'col27',QUANTITY_PER_SYSTEM::string,
    'col28',EXCHANGE_RATE::string, 'col29',TARGET_PRICE_USD::string, 'col30',NRE_USD::string, 'col31',DESIGN_REVENUE::string,
    'col32',DESIGN_REVENUE_SHARE::string, 'col33',CONFIDENCE::string, 'col34',ONSHARE::string, 'col35',COMMISSIONABLE_NRE_USD::string,
    'col36',COMMISSIONABLE_THREE_YEAR_REVENUE_USD::string, 'col37',THREE_YEAR_REVENUE::string, 'col38',LIFETIME_REVENUE::string,
    'col39',NEW_BUSINESS_COMMIT_PCT::string, 'col40',COST_TO_DEV_USD::string, 'col41',ITEM_NUMBER::string, 'col42',OPERATIONAL_ASP::string,
    'col43',REF_PRICE::string, 'col44',SIP_MULTIPLIER::string, 'col45',REGISTRATION_COST_ESTIMATE::string,
    'col46',BU_PRICE::string, 'col47',TRANSACTION_CURRENCY_ISO_CODE::string, 'col48',PROJECT_VALUE_OVER_LIFETIME::string,
    'col49',ONMARGIN_PERCENT_CUSTOMER_PRICE_REGULAR_PRICE::string, 'col50',CREATED_DATE::string, 'col51',MODIFIED_DATE::string, 'col52',PROTOTYPE_DATE::string,
    'col53',SOCKET_STATUS_CHANGE_DATE::string, 'col54',REGISTRATION_ITEM_REQUEST_DATE::string, 'col55',REGISTRATION_ITEM_REVIEW_DATE::string,
    'col56',REGISTRATION_ITEM_EXPIRE::string, 'col57',VALIDATED_DATE::string, 'col58',COMMISSION_WIN_DATE::string,
    'col59',BLUESHEET_FIRST_ADD_DATE::string, 'col60',BLUESHEET_UPDATED_DATE::string, 'col61',SAMPLES_REQUIRED_DATE::string,
    'col62',SEGMENT_MUSTWIN_SET_DATE::string, 'col63',EXEC_MUSTWIN_SET_DATE::string, 'col64',VP_MUSTWIN_SET_DATE::string,
    'col65',CLAIM_WIN_DATE::string, 'col66',NEXT_MILESTONE_DATE::string, 'col67',OPPORTUNITY_DECISION_DATE::string,
    'col68',BU_START_DATE::string, 'col69',BU_END_DATE::string, 'col70',ORIGINAL_APPROVAL_DATE::string,
    'col71',ORIGINAL_DISPOSITION_DATE::string, 'col72',PROJECT_MODIFIED_DATE::string, 'col73',BU_DESIGN_IN_REQUEST_DATE::string,
    'col74',IS_PART_ACTIVE::string, 'col75',IS_PRIMARY_OPN::string, 'col76',IS_OPPORTUNITY::string,
    'col77',IS_REFERENCE_DESIGN::string, 'col78',IS_MUSTWIN::string, 'col79',IS_SEGMENT_MUSTWIN::string, 'col80',IS_EXECMUSTWIN::string,
    'col81',IS_VPNMUSTWIN::string, 'col82',IS_DSM_REVIEW::string, 'col83',IS_BOM_EXPANSION::string, 'col84',IS_SUNSET::string,
    'col85',IS_NPI::string, 'col86',CREATED_BY::string, 'col87',MODIFIED_BY::string, 'col88',OPPORTUNITY_NUMBER::string,
    'col89',OPPORTUNITY_LIFECYCLE_STATUS::string, 'col90',DESIGN_TYPE::string, 'col91',CHANNEL_TYPE::string, 'col92',CHANNEL::string,
    'col93',FSE::string, 'col94',FAE::string, 'col95',PRODUCT_MARKETER::string, 'col96',SEC_INVOLVEMENT::string,
    'col97',PROGRAM_STATUS::string, 'col98',PROGRAM_NAME::string, 'col99',BOARD_NAME::string,
    'col100',ESTIMATED_ANNUAL_BOARDS::string, 'col101',PART_TYPE::string, 'col102',LINE_DESCRIPTION::string,
    'col103',SALES_SOCKET_STATUS::string, 'col104',CORPORATION_SOCKET_STATUS::string, 'col105',SEGMENT::string,
    'col106',APPLICATION::string, 'col107',REGISTRATION_NUMBER::string, 'col108',ACTION_NOTES::string,
    'col109',OPPORTUNITY_COMMENTS::string, 'col110',DISTRIBUTOR_NAME::string, 'col111',DISTRIBUTOR_BRANCH_NAME::string,
    'col112',REGISTRATION_ITEM_REVIEWBY::string, 'col113',REGISTRATION_ITEM_STATUS::string,
    'col114',REGISTRATION_ITEM_CANCEL_REJECT_REASON::string, 'col115',DISTRIBUTOR_FSE::string, 'col116',DISTRIBUTOR_FAE::string,
    'col117',COMMISSION_UPDATED_BY::string, 'col118',COMMISSION_NOTES::string, 'col119',BLUE_SHEET_REQUIRED::string,
    'col120',BLUE_SHEET_URL::string, 'col121',BU_STATUS::string, 'col122',BU_COMMENT::string, 'col123',CROSS_SELL_TYPE::string,
    'col124',COMPETITION::string, 'col125',RYG_STATUS::string, 'col126',SWAT_TEAM::string,
    'col127',REGISTRATION_ITEM_NUMBER::string, 'col128',DESIGN_STATUS::string, 'col129',BU_ACTION_NOTES::string,
    'col130',BU_DESIGN_IN_REQUEST::string, 'col131',POS50K_2M_REGOWNER::string, 'col132',POS2MPLUS_REGOWNER::string,
    'col133',POS50K_2M_NON_REGOWNER::string, 'col134',POS2MPLUS_NON_REGOWNER::string, 'col135',REBATE_NOTES::string,
    'col136',REFERENCE_OPPORTUNITY_NUMBER::string, 'col137',DESIGN_IN_APPROVER::string, 'col138',BU_MARKETER_APPROVAL::string,
    'col139',BU_MARKETER_APPROVER_ID::string, 'col140',BU_MARKETER_APPROVER_NAME::string, 'col141',DISTRIBUTOR_PROJECT_REF::string,
    'col142',DISTRIBUTOR_DEVICE_REF::string, 'col143',BLOCK_DIAGRAM_COMPLETE::string, 'col144',OPPORTUNITY_REGISTRATION_TYPE::string,
    'col145',TRANSFER_STATUS::string, 'col146',DISTRIBUTOR_NOTES::string, 'col147',SPLIT_REVIEW_STATUS::string,
    'col148',LOW_MARGIN_EXCEPTION::string, 'col149',MARGIN_BUCKET::string, 'col150',NPI_STATUS::string, 'col151',NPI_NUMBER::string,
    'col152',NPD_PROJECT_NUMBER::string, 'col153',OPPORTUNITY_LINE_CONTACT::string, 'col154',SIP_REASON::string,
    'col155',DESIGNWIN_REQUEST_STATUS::string, 'col156',CATCHUP_REG::string, 'col157',EFFORT_TIER::string, 'col158',PRODUCT_TIER::string,
    'col159',DESIGNIN_DESIGNWIN_APPROVER::string, 'col160',SOURCE_SYSTEM::string, 'col161',CREATED_ESTIMATED_ANNUAL_BOARDS::string,
    'col162',CREATED_QUANTITY_PER_SYSTEM::string, 'col163',CREATED_TARGET_PRICE_USD::string, 'col164',CREATED_DESIGN_REVENUE_SHARE::string,
    'col165',CREATED_ONSHARE::string, 'col166',CREATED_PROJECT_VALUE_OVER_LIFETIME::string,
    'col167',DIN_ESTIMATED_ANNUAL_BOARDS::string, 'col168',DIN_QUANTITY_PER_SYSTEM::string, 'col169',DIN_TARGET_PRICE_USD::string,
    'col170',DIN_DESIGN_REVENUE_SHARE::string, 'col171',DIN_ONSHARE::string, 'col172',DIN_PROJECT_VALUE_OVER_LIFETIME::string,
    'col173',DWIN_ESTIMATED_ANNUAL_BOARDS::string, 'col174',DWIN_QUANTITY_PER_SYSTEM::string, 'col175',DWIN_TARGET_PRICE_USD::string,
    'col176',DWIN_DESIGN_REVENUE_SHARE::string, 'col177',DWIN_ONSHARE::string, 'col178',DWIN_PROJECT_VALUE_OVER_LIFETIME::string,
    'col182',BIW_LOGICAL_DELETE_FLAG::string)::string )::BINARY as BIW_MD5_KEY

FROM FINAL_SQL    
WHERE DESIGN_PART_MAPPING_KEY NOT IN ( SELECT DESIGN_PART_MAPPING_AK FROM  EDWPRD.ODS_MODELN.SFDC_TO_MN_OPP_ITM WHERE IS_DELETE ='N')
"""

sqlglot.transpile(sql_text)
